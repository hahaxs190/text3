name: Build Android APK (AIDL Fixed)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install Java JDK 11
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          openjdk-11-jdk \
          unzip \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          libffi-dev \
          libssl-dev \
          autoconf \
          libtool \
          pkg-config \
          ant \
          gradle

    - name: Set up environment variables
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
        echo "NDK_HOME=$HOME/.buildozer/android/platform/android-ndk" >> $GITHUB_ENV

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        pip install buildozer cython==0.29.36 kivy

    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}

    - name: Cache Buildozer directory
      uses: actions/cache@v4
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}-${{ hashFiles('**/*.py') }}

    - name: Initialize Buildozer
      run: |
        # 创建buildozer目录结构
        mkdir -p $HOME/.buildozer/android/platform
        
        # 初始化buildozer（这会下载Android SDK/NDK）
        buildozer android clean || true

    - name: Setup Android SDK and fix AIDL
      run: |
        # 确保Android SDK目录存在
        mkdir -p $HOME/.buildozer/android/platform/android-sdk
        
        # 设置环境变量
        export ANDROID_SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
        export ANDROID_HOME="$HOME/.buildozer/android/platform/android-sdk"
        export PATH="$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools"
        
        # 等待buildozer下载Android SDK
        echo "等待Android SDK下载..."
        timeout 300 buildozer android debug --verbose || echo "初始化超时，继续..."
        
        # 查找并设置AIDL路径
        if [ -d "$ANDROID_HOME/build-tools" ]; then
          BUILD_TOOLS_VERSION=$(ls $ANDROID_HOME/build-tools | sort -V | tail -n 1)
          echo "找到Build Tools版本: $BUILD_TOOLS_VERSION"
          export PATH="$PATH:$ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION"
          echo "AIDL路径已添加到PATH: $ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION"
        fi
        
        # 验证AIDL是否可用
        which aidl || echo "AIDL仍未找到，但将在构建过程中下载"

    - name: Build APK with Buildozer
      run: |
        # 设置完整的环境变量
        export ANDROID_SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
        export ANDROID_HOME="$HOME/.buildozer/android/platform/android-sdk"
        export NDK_HOME="$HOME/.buildozer/android/platform/android-ndk"
        export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
        
        # 找到最新的build-tools版本并添加到PATH
        if [ -d "$ANDROID_HOME/build-tools" ]; then
          BUILD_TOOLS_VERSION=$(ls $ANDROID_HOME/build-tools | sort -V | tail -n 1 2>/dev/null)
          if [ ! -z "$BUILD_TOOLS_VERSION" ]; then
            export PATH="$PATH:$ANDROID_HOME/build-tools/$BUILD_TOOLS_VERSION"
            echo "使用Build Tools版本: $BUILD_TOOLS_VERSION"
          fi
        fi
        
        export PATH="$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools"
        
        # 设置权限
        chmod +x ./main.py || true
        
        # 开始构建（使用更详细的输出）
        echo "开始构建APK..."
        buildozer android debug --verbose
        
        # 检查输出
        echo "检查构建结果..."
        ls -la bin/ || echo "No bin directory found"
        if [ -d "bin" ]; then
          echo "APK文件列表:"
          find bin/ -name "*.apk" -ls
        fi

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: android-apk-debug
        path: bin/*.apk
        retention-days: 30

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: |
          .buildozer/
          *.log
        retention-days: 7
